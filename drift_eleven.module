<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Render\RendererInterface;
use Drupal\drift_eleven\Core\Cache\Cache;
use Drupal\drift_eleven\Core\Logger\Logger;
use Drupal\drift_eleven\Core\Logger\LoggerInterface;

require_once __DIR__ . '/globals.inc';

function drift_eleven_mail(string $key, array &$message, array $params): void {
  /** @var RendererInterface $renderer */
  $renderer = Drupal::service('renderer');

  switch($key) {
    case 'send_mail':
      if (isset($params['headers'])) $message['headers'] = array_merge($message['headers'], $params['headers']);
      if (!empty($params['from'])) $message['from'] = $params['from'];
      $message['subject'] = $params['subject'];
      $message['attachments'] = $params['attachments'];
      $message['body'][] = (string)$renderer->renderRoot($params['body']);
      break;
    default:
      break;
  }
}

/**
 * Implements hook_theme().
 */
function drift_eleven_theme(array $existing, string $type, string $theme, string $path): array {
  return [
    'user_password_reset_mail' => [
      'variables' => [
        'params' => [],
      ],
    ],
    'user_password_reset_confirmation_mail' => [
      'variables' => [
        'params' => [],
      ],
    ],
    'user_registration_mail' => [
      'variables' => [
        'params' => [],
      ],
    ],
  ];
}

function drift_eleven_cache_flush(): void {
  Cache::make(CACHE_BIN_KEY_DEFAULT)->flush();
}
function drift_eleven_entity_insert(EntityInterface $entity): void {
  Cache::make(CACHE_BIN_KEY_DEFAULT)->invalidateEntityTags($entity);
}
function drift_eleven_entity_update(EntityInterface $entity): void {
  Cache::make(CACHE_BIN_KEY_DEFAULT)->invalidateEntityTags($entity);
}
function drift_eleven_entity_delete(EntityInterface $entity): void {
  Cache::make(CACHE_BIN_KEY_DEFAULT)->invalidateEntityTags($entity);
}
